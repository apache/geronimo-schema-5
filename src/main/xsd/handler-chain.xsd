<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema"
	    targetNamespace="http://java.sun.com/xml/ns/javaee"
	    xmlns:javaee="http://java.sun.com/xml/ns/javaee"
	    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	    elementFormDefault="qualified"
	    attributeFormDefault="unqualified"
	    version="1.0">

  <xsd:include schemaLocation="javaee_5.xsd"/>

<!-- **************************************************** -->

  <xsd:element name="handler-chains" type="javaee:handler-chainsType">
    <xsd:annotation>
      <xsd:documentation>

	The handler-chains element is the root element for defining handlerchains.

      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

<!-- **************************************************** -->

    <!-- all the types duplicate types in javaee_web_services_1_2.xsd so I've commented them out so this will compile -->

<!--
  <xsd:complexType name="handler-chainsType">
    <xsd:annotation>
      <xsd:documentation>

      The handler-chains element defines the handlerchains associated with this
      service or service endpoint.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="handler-chain" 
                   type="javaee:handler-chainType"
		   minOccurs="1" maxOccurs="unbounded"/>
    </xsd:sequence>

    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
-->

<!-- **************************************************** -->

<!--
  <xsd:complexType name="handler-chainType">
    <xsd:annotation>
      <xsd:documentation>

      The handler-chain element defines the handlerchain.
      Handlerchain can be defined such that the handlers in the
      handlerchain operate,all ports of a service, on a specific
      port or on a list of protocol-bindings. The choice of elements
      service-name-pattern, port-name-pattern and protocol-bindings
      are used to specify whether the handlers in handler-chain are
      for a service, port or protocol binding. If none of these
      choices are specified with the handler-chain element then the
      handlers specified in the handler-chain will be applied on
      everything.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>

      <xsd:choice minOccurs="0" maxOccurs="1">
         <xsd:element name="service-name-pattern"
		      type="javaee:qname-pattern" />
         <xsd:element name="port-name-pattern"
		      type="javaee:qname-pattern" />
         <xsd:element name="protocol-bindings"
		      type="javaee:protocol-bindingListType"/>
      </xsd:choice>

      <xsd:element name="handler"
                   type="javaee:handlerType"
		   minOccurs="1" maxOccurs="unbounded"/>
    </xsd:sequence>

    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
-->

<!-- **************************************************** -->

<!--
  <xsd:simpleType name="protocol-URIAliasType">
     <xsd:annotation>
        <xsd:documentation>
	   Defines the type that is used for specifying tokens that
	   start with ## which are used to alias existing standard
	   protocol bindings and support aliases for new standard
	   binding URIs that are introduced in future specifications.

	   The following tokens alias the standard protocol binding
	   URIs:

	   ##SOAP11_HTTP = "http://schemas.xmlsoap.org/wsdl/soap/http"
           ##SOAP12_HTTP = "http://www.w3.org/2003/05/soap/bindings/HTTP/"
           ##XML_HTTP = "http://www.w3.org/2004/08/wsdl/http"

        </xsd:documentation>
     </xsd:annotation>
     <xsd:restriction base="xsd:token">
        <xsd:pattern value="##.+"/>
     </xsd:restriction>
  </xsd:simpleType>
-->

<!-- **************************************************** -->

<!--
  <xsd:simpleType name="protocol-bindingListType">
     <xsd:annotation>
        <xsd:documentation>
	   Defines the type used for specifying a list of
	   protocol-bindingType(s). For e.g.

	    ##SOAP11_HTTP ##SOAP12_HTTP ##XML_HTTP

        </xsd:documentation>
     </xsd:annotation>
     <xsd:list itemType="javaee:protocol-bindingType"/>
  </xsd:simpleType>
-->

<!-- **************************************************** -->

<!--
  <xsd:simpleType name="protocol-bindingType">
     <xsd:annotation>
        <xsd:documentation>
	   Defines the type used for specifying the URI for the
	   protocol binding used by the port-component.  For
	   portability one could use one of the following tokens that
	   alias the standard binding types:

	    ##SOAP11_HTTP
	    ##SOAP12_HTTP
	    ##XML_HTTP

	   Other specifications could define tokens that start with ##
	   to alias new standard binding URIs that are introduced.

        </xsd:documentation>
     </xsd:annotation>
     <xsd:union memberTypes="xsd:anyURI javaee:protocol-URIAliasType"/>
  </xsd:simpleType>
-->

<!-- **************************************************** -->

<!--
  <xsd:simpleType name="qname-pattern">
     <xsd:annotation>
        <xsd:documentation>
	     This is used to specify the QName pattern in the
	     attribute service-name-pattern and port-name-pattern in
	     the handler-chain element

	     For example, the various forms acceptable here for
	     service-name-pattern attribute in handler-chain element
	     are :

	     Exact Name: service-name-pattern="ns1:EchoService"

		 In this case, handlers specified in this
		 handler-chain element will apply to all ports with
		 this exact service name. The namespace prefix must
		 have been declared in a namespace declaration
		 attribute in either the start-tag of the element
		 where the prefix is used or in an an ancestor
		 element (i.e. an element in whose content the
		 prefixed markup occurs)

	     Pattern : service-name-pattern="ns1:EchoService*"

		 In this case, handlers specified in this
		 handler-chain element will apply to all ports whose
		 Service names are like EchoService1, EchoServiceFoo
		 etc. The namespace prefix must have been declared in
		 a namespace declaration attribute in either the
		 start-tag of the element where the prefix is used or
		 in an an ancestor element (i.e. an element in whose
		 content the prefixed markup occurs)

	     Wild Card : service-name-pattern="*"

		In this case, handlers specified in this handler-chain
		element will apply to ports of all service names.

	    The same can be applied to port-name attribute in
	    handler-chain element.

        </xsd:documentation>
     </xsd:annotation>

     <xsd:restriction base="xsd:token">
        <xsd:pattern value="\*|([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*\*?"/>
     </xsd:restriction>

  </xsd:simpleType>
-->


<!-- **************************************************** -->

<!--
  <xsd:complexType name="handlerType">
    <xsd:annotation>
      <xsd:documentation>

	Declares the handler. Handlers can access the
	init-param name/value pairs using the HandlerInfo interface.

      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:group ref="javaee:descriptionGroup"/>
      <xsd:element name="handler-name"
		   type="javaee:string">
	<xsd:annotation>
	  <xsd:documentation>

	    Defines the name of the handler.

	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element>
      <xsd:element name="handler-class"
		   type="javaee:fully-qualified-classType">
	<xsd:annotation>
	  <xsd:documentation>

	    Defines a fully qualified class name for the handler implementation.

	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element>
      <xsd:element name="init-param"
		   type="javaee:param-valueType"
		   minOccurs="0" maxOccurs="unbounded"/>

      <xsd:element name="soap-role"
		   type="javaee:string"
		   minOccurs="0" maxOccurs="unbounded">
	<xsd:annotation>
	  <xsd:documentation>

	    The soap-role element contains a SOAP actor definition that the
	    Handler will play as a role.

	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>
-->

</xsd:schema>

